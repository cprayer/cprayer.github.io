{"componentChunkName":"component---src-templates-tags-page-tsx","path":"/tags/network/","result":{"data":{"tags":{"group":[{"fieldValue":"HTTP","totalCount":1},{"fieldValue":"RFC","totalCount":1},{"fieldValue":"TCP","totalCount":1},{"fieldValue":"cka","totalCount":1},{"fieldValue":"communicationsException","totalCount":1},{"fieldValue":"data-structure","totalCount":1},{"fieldValue":"dbcp2","totalCount":1},{"fieldValue":"dns-timeout-issue","totalCount":1},{"fieldValue":"extended keepalive","totalCount":1},{"fieldValue":"git","totalCount":1},{"fieldValue":"java","totalCount":1},{"fieldValue":"k8s","totalCount":3},{"fieldValue":"k8s-probe","totalCount":1},{"fieldValue":"k8s-secret","totalCount":1},{"fieldValue":"k8s-tls","totalCount":1},{"fieldValue":"keep-alive","totalCount":1},{"fieldValue":"lettuce","totalCount":1},{"fieldValue":"network","totalCount":3},{"fieldValue":"redis","totalCount":1},{"fieldValue":"spring","totalCount":2},{"fieldValue":"spring-bean","totalCount":1},{"fieldValue":"spring-bean-lite-mode","totalCount":1},{"fieldValue":"spring-boot","totalCount":1},{"fieldValue":"spring-request-mapping","totalCount":1},{"fieldValue":"troubleshooting","totalCount":3},{"fieldValue":"vegeta","totalCount":1}]},"posts":{"totalCount":3,"edges":[{"node":{"excerpt":"RFC 1918 사설망을 위한 IP 대역을 할당합니다. 해당하는 IP 대역은 internet으로 routing되지 않기로 약속되어 있습니다. 10.0.0.0(8비트) / 172.16.0.0(12비트) / 192.168.0.0(1…","timeToRead":1,"fields":{"slug":"/posts/rfc-1918/"},"frontmatter":{"title":"사설망 대역(RFC 1918)","updatedDate":"15 April, 2020","image":null,"author":{"id":"cprayer","avatar":{"children":[{"fixed":{"src":"/static/5d0fd80a1d7df4f6a3adf452cc763c07/11c93/cprayer.jpg","srcSet":"/static/5d0fd80a1d7df4f6a3adf452cc763c07/11c93/cprayer.jpg 1x,\n/static/5d0fd80a1d7df4f6a3adf452cc763c07/dee17/cprayer.jpg 1.5x,\n/static/5d0fd80a1d7df4f6a3adf452cc763c07/0f320/cprayer.jpg 2x"}}]}}}}},{"node":{"excerpt":"TL; DR 클라이언트 - 서버간 연결이 유효하다면, 서버에서 임의로 커넥션을 정리하지 않도록 서버에서 설정한 connection idle timeout 시간보다 더 짧은 주기로 probe / heartbeat…","timeToRead":2,"fields":{"slug":"/posts/nodejs-http-api-call-rst-issue/"},"frontmatter":{"title":"nodeJS HTTP API CALL시 간헐적인 RST(Connection reset by peer) 발생 이슈","updatedDate":"05 February, 2020","image":null,"author":{"id":"cprayer","avatar":{"children":[{"fixed":{"src":"/static/5d0fd80a1d7df4f6a3adf452cc763c07/11c93/cprayer.jpg","srcSet":"/static/5d0fd80a1d7df4f6a3adf452cc763c07/11c93/cprayer.jpg 1x,\n/static/5d0fd80a1d7df4f6a3adf452cc763c07/dee17/cprayer.jpg 1.5x,\n/static/5d0fd80a1d7df4f6a3adf452cc763c07/0f320/cprayer.jpg 2x"}}]}}}}},{"node":{"excerpt":"TCP keepalive TCP keepalive는 현재 두 호스트간에 연결되어 있는 TCP 커넥션이 유효한지, 아닌지를 판단할 때 사용됩니다.\n이는 서버 어플리케이션에서 유효하지 않은 커넥션을 정리할 때 사용됩니다. linux에서 제공해주는 TCP…","timeToRead":2,"fields":{"slug":"/posts/tcp-keepalive-and-http-keepalive/"},"frontmatter":{"title":"TCP keepalive, HTTP keepalive","updatedDate":"03 December, 2019","image":{"children":[{"fixed":{"src":"/static/d92e70ad4712168237416f37d7019115/48a9b/network.jpg","srcSet":"/static/d92e70ad4712168237416f37d7019115/48a9b/network.jpg 1x,\n/static/d92e70ad4712168237416f37d7019115/d1ff8/network.jpg 1.5x,\n/static/d92e70ad4712168237416f37d7019115/bb728/network.jpg 2x"}}]},"author":{"id":"cprayer","avatar":{"children":[{"fixed":{"src":"/static/5d0fd80a1d7df4f6a3adf452cc763c07/11c93/cprayer.jpg","srcSet":"/static/5d0fd80a1d7df4f6a3adf452cc763c07/11c93/cprayer.jpg 1x,\n/static/5d0fd80a1d7df4f6a3adf452cc763c07/dee17/cprayer.jpg 1.5x,\n/static/5d0fd80a1d7df4f6a3adf452cc763c07/0f320/cprayer.jpg 2x"}}]}}}}}]}},"pageContext":{"isCreatedByStatefulCreatePages":false,"tag":"network"}}}