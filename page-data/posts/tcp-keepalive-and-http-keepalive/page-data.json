{"componentChunkName":"component---src-templates-blog-post-tsx","path":"/posts/tcp-keepalive-and-http-keepalive/","result":{"data":{"post":{"html":"<h2 id=\"tcp-keepalive\" style=\"position:relative;\"><a href=\"#tcp-keepalive\" aria-label=\"tcp keepalive permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>TCP keepalive</h2>\n<p>TCP keepalive는 현재 두 호스트간에 연결되어 있는 TCP 커넥션이 유효한지, 아닌지를 판단할 때 사용됩니다.\n이는 서버 어플리케이션에서 유효하지 않은 커넥션을 정리할 때 사용됩니다.</p>\n<p>linux에서 제공해주는 TCP Keepalive의 경우 procfs, sysctl(2) 인터페이스를 통해 확인할 수 있고, 3가지 파라미터를 가지고 있습니다. (sysctl(2)의 경우 linux 5.5 kernel에서 사라진다고 합니다. <a href=\"https://www.phoronix.com/scan.php?page=news_item&#x26;px=Linux-5.5-Kills-SYSCTL-SYSCALL\">링크</a>)\n필요한 경우 TCP 단에서, 혹은 더 상위의 레이어 단의 프로토콜에서 구현해서 사용할 수 있습니다.\n여기에서는 linux의 TCP Keepalive를 설명합니다.</p>\n<p>procfs의 경우 /proc에 마운트되어 있고,  <code class=\"language-text\">/proc/sys/net/ipv4/tcp_keepalive_time(default 7200s)</code>, <code class=\"language-text\">/proc/sys/net/ipv4/tcp_keepalive_intvl(default 75s)</code>, <code class=\"language-text\">/proc/sys/net/ipv4/tcp_keepalive_probes(default 9)</code>가 있습니다.\n<code class=\"language-text\">tcp_keepalive_time</code>과 <code class=\"language-text\">tcp_keepalive_intvl</code>의 경우 초 단위, <code class=\"language-text\">tcp_keepalive_probes</code>의 경우 횟수 단위입니다.\n각 파라미터의 의미는 <code class=\"language-text\">tcp_keepalive_time</code>만큼 대기한 이후, probe 패킷을 <code class=\"language-text\">tcp_keepalive_intvl</code>마다 보내고 <code class=\"language-text\">tcp_keepalive_probes</code> 횟수만큼 연속적으로 ACK 응답을 받지 못하면 유효하지 않는 TCP 커넥션이라 판단하고 연결을 끊습니다.</p>\n<p>default 값을 예시로 들면 특정 TCP 커넥션에 대해 마지막 데이터 패킷을 받은 이후 7200초를 대기한 뒤 probe 패킷을 75초마다 보내고 9번 연속적으로 ACK 응답을 받지 못하면 유효하지 않는 TCP 커넥션이라 판단한다고 보고 해당 커넥션을 삭제합니다.\nprobe에 대한 ACK 응답을 받게 된다면 마지막 데이터 패킷을 받고 tcp_keepalive_time만큼 대기한 이후 probe 패킷을 <code class=\"language-text\">tcp_keepalive_intvl</code>마다 보내는 로직을 다시 실행하게 됩니다.</p>\n<h2 id=\"http-keepalive\" style=\"position:relative;\"><a href=\"#http-keepalive\" aria-label=\"http keepalive permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>HTTP keepalive</h2>\n<p>HTTP keepalive는 TCP 커넥션을 재사용하고자 할 때 사용됩니다.</p>\n<p>HTTP keepalive를 설정하지 않으면, 매 번 HTTP 통신이 일어날 때마다 새로운 TCP 커넥션이 생성됩니다.\nHTTP Keepalive를 설정하면 기존 TCP 커넥션을 재사용하게 됩니다. (HTTP 1.1에서는 default로 keepalive가 활성화되어 있습니다.)</p>\n<h2 id=\"참고-자료\" style=\"position:relative;\"><a href=\"#%EC%B0%B8%EA%B3%A0-%EC%9E%90%EB%A3%8C\" aria-label=\"참고 자료 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>참고 자료</h2>\n<ul>\n<li><a href=\"http://tldp.org/HOWTO/TCP-Keepalive-HOWTO/usingkeepalive.html\">http://tldp.org/HOWTO/TCP-Keepalive-HOWTO/usingkeepalive.html</a></li>\n<li><a href=\"https://en.wikipedia.org/wiki/HTTP_persistent_connection\">https://en.wikipedia.org/wiki/HTTP_persistent_connection</a></li>\n</ul>","excerpt":"TCP keepalive TCP keepalive는 현재 두 호스트간에 연결되어 있는 TCP 커넥션이 유효한지, 아닌지를 판단할 때 사용됩니다.\n이는 서버 어플리케이션에서 유효하지 않은 커넥션을 정리할 때 사용됩니다. linux에서 제공해주는 TCP…","timeToRead":1,"fields":{"slug":"/posts/tcp-keepalive-and-http-keepalive/"},"frontmatter":{"tags":["k8s","TCP","HTTP","keep-alive","network"],"author":{"jsonId":"cprayer","bio":"","twitter":"@fabien0102","avatar":{"children":[{"fixed":{"src":"/static/5d0fd80a1d7df4f6a3adf452cc763c07/b0b39/cprayer.jpg","srcSet":"/static/5d0fd80a1d7df4f6a3adf452cc763c07/b0b39/cprayer.jpg 1x,\n/static/5d0fd80a1d7df4f6a3adf452cc763c07/93542/cprayer.jpg 1.5x,\n/static/5d0fd80a1d7df4f6a3adf452cc763c07/aa4d2/cprayer.jpg 2x"}}]}},"title":"TCP keepalive, HTTP keepalive","updatedDate":"Dec 3, 2019","image":{"children":[{"fixed":{"src":"/static/d92e70ad4712168237416f37d7019115/df0e0/network.jpg","srcSet":"/static/d92e70ad4712168237416f37d7019115/df0e0/network.jpg 1x,\n/static/d92e70ad4712168237416f37d7019115/12a03/network.jpg 1.5x,\n/static/d92e70ad4712168237416f37d7019115/0be0e/network.jpg 2x"}}]}}},"recents":{"edges":[{"node":{"fields":{"slug":"/posts/epoll-wait-failed-function-not-implemented/"},"timeToRead":1,"frontmatter":{"title":"netty epoll_wait(..) failed: Function not implemented 에러 이슈 해결 방법","image":null,"author":{"jsonId":"cprayer","avatar":{"children":[{"fixed":{"src":"/static/5d0fd80a1d7df4f6a3adf452cc763c07/6d45f/cprayer.jpg","srcSet":"/static/5d0fd80a1d7df4f6a3adf452cc763c07/6d45f/cprayer.jpg 1x,\n/static/5d0fd80a1d7df4f6a3adf452cc763c07/fe190/cprayer.jpg 1.5x,\n/static/5d0fd80a1d7df4f6a3adf452cc763c07/3e51d/cprayer.jpg 2x"}}]}}}}},{"node":{"fields":{"slug":"/posts/kube-proxy-and-nf-conntrack-packet-drop/"},"timeToRead":1,"frontmatter":{"title":"nf_conntrack_max 값이 k8s ingress 노드 재부팅 후 의도하지 않은 값으로 업데이트 되는 이슈","image":null,"author":{"jsonId":"cprayer","avatar":{"children":[{"fixed":{"src":"/static/5d0fd80a1d7df4f6a3adf452cc763c07/6d45f/cprayer.jpg","srcSet":"/static/5d0fd80a1d7df4f6a3adf452cc763c07/6d45f/cprayer.jpg 1x,\n/static/5d0fd80a1d7df4f6a3adf452cc763c07/fe190/cprayer.jpg 1.5x,\n/static/5d0fd80a1d7df4f6a3adf452cc763c07/3e51d/cprayer.jpg 2x"}}]}}}}},{"node":{"fields":{"slug":"/posts/k8s-and-etc-resolv-conf/"},"timeToRead":3,"frontmatter":{"title":"k8s와 /etc/resolv.conf","image":null,"author":{"jsonId":"cprayer","avatar":{"children":[{"fixed":{"src":"/static/5d0fd80a1d7df4f6a3adf452cc763c07/6d45f/cprayer.jpg","srcSet":"/static/5d0fd80a1d7df4f6a3adf452cc763c07/6d45f/cprayer.jpg 1x,\n/static/5d0fd80a1d7df4f6a3adf452cc763c07/fe190/cprayer.jpg 1.5x,\n/static/5d0fd80a1d7df4f6a3adf452cc763c07/3e51d/cprayer.jpg 2x"}}]}}}}},{"node":{"fields":{"slug":"/posts/redis-manually-force-a-failover/"},"timeToRead":1,"frontmatter":{"title":"강제로 레플리카 레디스를 마스터로 승격시키기","image":null,"author":{"jsonId":"cprayer","avatar":{"children":[{"fixed":{"src":"/static/5d0fd80a1d7df4f6a3adf452cc763c07/6d45f/cprayer.jpg","srcSet":"/static/5d0fd80a1d7df4f6a3adf452cc763c07/6d45f/cprayer.jpg 1x,\n/static/5d0fd80a1d7df4f6a3adf452cc763c07/fe190/cprayer.jpg 1.5x,\n/static/5d0fd80a1d7df4f6a3adf452cc763c07/3e51d/cprayer.jpg 2x"}}]}}}}}]}},"pageContext":{"slug":"/posts/tcp-keepalive-and-http-keepalive/"}},"staticQueryHashes":[],"slicesMap":{}}