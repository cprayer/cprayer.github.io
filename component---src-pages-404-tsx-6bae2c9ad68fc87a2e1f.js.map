{"version":3,"file":"component---src-pages-404-tsx-6bae2c9ad68fc87a2e1f.js","mappings":"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","sources":["webpack://gatsby-starter/./src/pages/404.tsx","webpack://gatsby-starter/./node_modules/semantic-ui-react/dist/es/collections/Grid/GridColumn.js","webpack://gatsby-starter/./node_modules/semantic-ui-react/dist/es/collections/Grid/GridRow.js","webpack://gatsby-starter/./node_modules/semantic-ui-react/dist/es/collections/Grid/Grid.js"],"sourcesContent":["import * as React from \"react\";\nimport { Header, Icon, Grid } from \"semantic-ui-react\";\nimport {withLayout} from \"../components/Layout\";\n\nconst NotFoundPage = () =>\n    <Grid centered verticalAlign=\"middle\"\n      style={{\n        minHeight: \"700px\",\n        }}\n      >\n      <Grid.Column>\n        <Grid.Row style={{textAlign: \"center\"}}>\n          <Icon name=\"marker\" size=\"huge\"/>\n          <Header as=\"h1\">You are here!</Header>\n          <Header as=\"h2\">But nothing found for you #404</Header>\n        </Grid.Row>\n      </Grid.Column>\n    </Grid>;\n\nexport default withLayout(NotFoundPage);\n","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport cx from 'clsx';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { customPropTypes, createShorthandFactory, getElementType, getUnhandledProps, SUI, useKeyOnly, useMultipleProp, useTextAlignProp, useValueAndKey, useVerticalAlignProp, useWidthProp } from '../../lib';\n/**\n * A column sub-component for Grid.\n */\n\nfunction GridColumn(props) {\n  var children = props.children,\n      className = props.className,\n      computer = props.computer,\n      color = props.color,\n      floated = props.floated,\n      largeScreen = props.largeScreen,\n      mobile = props.mobile,\n      only = props.only,\n      stretched = props.stretched,\n      tablet = props.tablet,\n      textAlign = props.textAlign,\n      verticalAlign = props.verticalAlign,\n      widescreen = props.widescreen,\n      width = props.width;\n  var classes = cx(color, useKeyOnly(stretched, 'stretched'), useMultipleProp(only, 'only'), useTextAlignProp(textAlign), useValueAndKey(floated, 'floated'), useVerticalAlignProp(verticalAlign), useWidthProp(computer, 'wide computer'), useWidthProp(largeScreen, 'wide large screen'), useWidthProp(mobile, 'wide mobile'), useWidthProp(tablet, 'wide tablet'), useWidthProp(widescreen, 'wide widescreen'), useWidthProp(width, 'wide'), 'column', className);\n  var rest = getUnhandledProps(GridColumn, props);\n  var ElementType = getElementType(GridColumn, props);\n  return /*#__PURE__*/React.createElement(ElementType, _extends({}, rest, {\n    className: classes\n  }), children);\n}\n\nGridColumn.handledProps = [\"as\", \"children\", \"className\", \"color\", \"computer\", \"floated\", \"largeScreen\", \"mobile\", \"only\", \"stretched\", \"tablet\", \"textAlign\", \"verticalAlign\", \"widescreen\", \"width\"];\nGridColumn.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: PropTypes.elementType,\n\n  /** Primary content. */\n  children: PropTypes.node,\n\n  /** Additional classes. */\n  className: PropTypes.string,\n\n  /** A grid column can be colored. */\n  color: PropTypes.oneOf(SUI.COLORS),\n\n  /** A column can specify a width for a computer. */\n  computer: customPropTypes.every([customPropTypes.disallow(['width']), PropTypes.oneOf(SUI.WIDTHS)]),\n\n  /** A column can sit flush against the left or right edge of a row. */\n  floated: PropTypes.oneOf(SUI.FLOATS),\n\n  /** A column can specify a width for a large screen device. */\n  largeScreen: customPropTypes.every([customPropTypes.disallow(['width']), PropTypes.oneOf(SUI.WIDTHS)]),\n\n  /** A column can specify a width for a mobile device. */\n  mobile: customPropTypes.every([customPropTypes.disallow(['width']), PropTypes.oneOf(SUI.WIDTHS)]),\n\n  /** A column can appear only for a specific device, or screen sizes. */\n  only: customPropTypes.multipleProp(SUI.VISIBILITY),\n\n  /** A column can stretch its contents to take up the entire grid or row height. */\n  stretched: PropTypes.bool,\n\n  /** A column can specify a width for a tablet device. */\n  tablet: customPropTypes.every([customPropTypes.disallow(['width']), PropTypes.oneOf(SUI.WIDTHS)]),\n\n  /** A column can specify its text alignment. */\n  textAlign: PropTypes.oneOf(SUI.TEXT_ALIGNMENTS),\n\n  /** A column can specify its vertical alignment to have all its columns vertically centered. */\n  verticalAlign: PropTypes.oneOf(SUI.VERTICAL_ALIGNMENTS),\n\n  /** A column can specify a width for a wide screen device. */\n  widescreen: customPropTypes.every([customPropTypes.disallow(['width']), PropTypes.oneOf(SUI.WIDTHS)]),\n\n  /** Represents width of column. */\n  width: customPropTypes.every([customPropTypes.disallow(['computer', 'largeScreen', 'mobile', 'tablet', 'widescreen']), PropTypes.oneOf(SUI.WIDTHS)])\n} : {};\nGridColumn.create = createShorthandFactory(GridColumn, function (children) {\n  return {\n    children: children\n  };\n});\nexport default GridColumn;","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport cx from 'clsx';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { customPropTypes, getElementType, getUnhandledProps, SUI, useKeyOnly, useMultipleProp, useTextAlignProp, useVerticalAlignProp, useWidthProp } from '../../lib';\n/**\n * A row sub-component for Grid.\n */\n\nfunction GridRow(props) {\n  var centered = props.centered,\n      children = props.children,\n      className = props.className,\n      color = props.color,\n      columns = props.columns,\n      divided = props.divided,\n      only = props.only,\n      reversed = props.reversed,\n      stretched = props.stretched,\n      textAlign = props.textAlign,\n      verticalAlign = props.verticalAlign;\n  var classes = cx(color, useKeyOnly(centered, 'centered'), useKeyOnly(divided, 'divided'), useKeyOnly(stretched, 'stretched'), useMultipleProp(only, 'only'), useMultipleProp(reversed, 'reversed'), useTextAlignProp(textAlign), useVerticalAlignProp(verticalAlign), useWidthProp(columns, 'column', true), 'row', className);\n  var rest = getUnhandledProps(GridRow, props);\n  var ElementType = getElementType(GridRow, props);\n  return /*#__PURE__*/React.createElement(ElementType, _extends({}, rest, {\n    className: classes\n  }), children);\n}\n\nGridRow.handledProps = [\"as\", \"centered\", \"children\", \"className\", \"color\", \"columns\", \"divided\", \"only\", \"reversed\", \"stretched\", \"textAlign\", \"verticalAlign\"];\nGridRow.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: PropTypes.elementType,\n\n  /** A row can have its columns centered. */\n  centered: PropTypes.bool,\n\n  /** Primary content. */\n  children: PropTypes.node,\n\n  /** Additional classes. */\n  className: PropTypes.string,\n\n  /** A grid row can be colored. */\n  color: PropTypes.oneOf(SUI.COLORS),\n\n  /** Represents column count per line in Row. */\n  columns: PropTypes.oneOf([].concat(SUI.WIDTHS, ['equal'])),\n\n  /** A row can have dividers between its columns. */\n  divided: PropTypes.bool,\n\n  /** A row can appear only for a specific device, or screen sizes. */\n  only: customPropTypes.multipleProp(SUI.VISIBILITY),\n\n  /** A row can specify that its columns should reverse order at different device sizes. */\n  reversed: customPropTypes.multipleProp(['computer', 'computer vertically', 'mobile', 'mobile vertically', 'tablet', 'tablet vertically']),\n\n  /** A row can stretch its contents to take up the entire column height. */\n  stretched: PropTypes.bool,\n\n  /** A row can specify its text alignment. */\n  textAlign: PropTypes.oneOf(SUI.TEXT_ALIGNMENTS),\n\n  /** A row can specify its vertical alignment to have all its columns vertically centered. */\n  verticalAlign: PropTypes.oneOf(SUI.VERTICAL_ALIGNMENTS)\n} : {};\nexport default GridRow;","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport cx from 'clsx';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { customPropTypes, getElementType, getUnhandledProps, SUI, useKeyOnly, useKeyOrValueAndKey, useMultipleProp, useTextAlignProp, useVerticalAlignProp, useWidthProp } from '../../lib';\nimport GridColumn from './GridColumn';\nimport GridRow from './GridRow';\n/**\n * A grid is used to harmonize negative space in a layout.\n */\n\nfunction Grid(props) {\n  var celled = props.celled,\n      centered = props.centered,\n      children = props.children,\n      className = props.className,\n      columns = props.columns,\n      container = props.container,\n      divided = props.divided,\n      doubling = props.doubling,\n      inverted = props.inverted,\n      padded = props.padded,\n      relaxed = props.relaxed,\n      reversed = props.reversed,\n      stackable = props.stackable,\n      stretched = props.stretched,\n      textAlign = props.textAlign,\n      verticalAlign = props.verticalAlign;\n  var classes = cx('ui', useKeyOnly(centered, 'centered'), useKeyOnly(container, 'container'), useKeyOnly(doubling, 'doubling'), useKeyOnly(inverted, 'inverted'), useKeyOnly(stackable, 'stackable'), useKeyOnly(stretched, 'stretched'), useKeyOrValueAndKey(celled, 'celled'), useKeyOrValueAndKey(divided, 'divided'), useKeyOrValueAndKey(padded, 'padded'), useKeyOrValueAndKey(relaxed, 'relaxed'), useMultipleProp(reversed, 'reversed'), useTextAlignProp(textAlign), useVerticalAlignProp(verticalAlign), useWidthProp(columns, 'column', true), 'grid', className);\n  var rest = getUnhandledProps(Grid, props);\n  var ElementType = getElementType(Grid, props);\n  return /*#__PURE__*/React.createElement(ElementType, _extends({}, rest, {\n    className: classes\n  }), children);\n}\n\nGrid.handledProps = [\"as\", \"celled\", \"centered\", \"children\", \"className\", \"columns\", \"container\", \"divided\", \"doubling\", \"inverted\", \"padded\", \"relaxed\", \"reversed\", \"stackable\", \"stretched\", \"textAlign\", \"verticalAlign\"];\nGrid.Column = GridColumn;\nGrid.Row = GridRow;\nGrid.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: PropTypes.elementType,\n\n  /** A grid can have rows divided into cells. */\n  celled: PropTypes.oneOfType([PropTypes.bool, PropTypes.oneOf(['internally'])]),\n\n  /** A grid can have its columns centered. */\n  centered: PropTypes.bool,\n\n  /** Primary content. */\n  children: PropTypes.node,\n\n  /** Additional classes. */\n  className: PropTypes.string,\n\n  /** Represents column count per row in Grid. */\n  columns: PropTypes.oneOf([].concat(SUI.WIDTHS, ['equal'])),\n\n  /** A grid can be combined with a container to use the available layout and alignment. */\n  container: PropTypes.bool,\n\n  /** A grid can have dividers between its columns. */\n  divided: PropTypes.oneOfType([PropTypes.bool, PropTypes.oneOf(['vertically'])]),\n\n  /** A grid can double its column width on tablet and mobile sizes. */\n  doubling: PropTypes.bool,\n\n  /** A grid's colors can be inverted. */\n  inverted: PropTypes.bool,\n\n  /** A grid can preserve its vertical and horizontal gutters on first and last columns. */\n  padded: PropTypes.oneOfType([PropTypes.bool, PropTypes.oneOf(['horizontally', 'vertically'])]),\n\n  /** A grid can increase its gutters to allow for more negative space. */\n  relaxed: PropTypes.oneOfType([PropTypes.bool, PropTypes.oneOf(['very'])]),\n\n  /** A grid can specify that its columns should reverse order at different device sizes. */\n  reversed: customPropTypes.multipleProp(['computer', 'computer vertically', 'mobile', 'mobile vertically', 'tablet', 'tablet vertically']),\n\n  /** A grid can have its columns stack on-top of each other after reaching mobile breakpoints. */\n  stackable: PropTypes.bool,\n\n  /** A grid can stretch its contents to take up the entire grid height. */\n  stretched: PropTypes.bool,\n\n  /** A grid can specify its text alignment. */\n  textAlign: PropTypes.oneOf(SUI.TEXT_ALIGNMENTS),\n\n  /** A grid can specify its vertical alignment to have all its columns vertically centered. */\n  verticalAlign: PropTypes.oneOf(SUI.VERTICAL_ALIGNMENTS)\n} : {};\nexport default Grid;"],"names":["withLayout","NotFoundPage","React","Grid","centered","verticalAlign","style","minHeight","Column","Row","textAlign","Icon","name","size","Header","as","GridColumn","props","children","className","computer","color","floated","largeScreen","mobile","only","stretched","tablet","widescreen","width","classes","rest","getUnhandledProps","ElementType","getElementType","handledProps","propTypes","create","GridRow","columns","divided","reversed","celled","container","doubling","inverted","padded","relaxed","stackable"],"sourceRoot":""}